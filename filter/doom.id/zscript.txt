version "4.6"

Class BlackoutEffect : CustomInventory
{
Default{
  -COUNTITEM
  +INVENTORY.ALWAYSPICKUP
  Inventory.PickupMessage "";
  Inventory.PickupSound "";
}
  States
  {
  Pickup:
    TNT1 A 0 A_SetBlend ("00 00 00", 2.0, 50);
    Stop;
  }
}

class HD_GluottonyKey:HDPickup{
    default{
        -hdpickup.fitsinbackpack
        hdpickup.refid "GLT";
        tag " \ca? ? ?\c-";
    }
    states{
    spawn:
        PINS A -1; stop;
    pickup:
        TNT1 A 0{
            A_GiveInventory("UnmakerUpgrade1Icon", invoker.amount); A_Log("\ca*** Unknown loadout code:  \"\cxglt\ca\"\c-");
        }fail;
    }
}

class HD_PrideKey:HDPickup{
    default{
        -hdpickup.fitsinbackpack
        hdpickup.refid "PRD";
        tag " \ca? ? ?\c-";
    }
    states{
    spawn:
        PINS A -1; stop;
    pickup:
        TNT1 A 0{
            A_GiveInventory("UnmakerUpgrade2Icon", invoker.amount); A_Log("\ca*** Unknown loadout code:  \"\cxprd\ca\"\c-");
        }fail;
    }
}

class HD_LustKey:HDPickup{
    default{
        -hdpickup.fitsinbackpack
        hdpickup.refid "LST";
        tag " \ca? ? ?\c-";
    }
    states{
    spawn:
        PINS A -1; stop;
    pickup:
        TNT1 A 0{
            A_GiveInventory("UnmakerUpgrade3Icon", invoker.amount); A_Log("\ca*** Unknown loadout code:  \"\cxlst\ca\"\c-");
        }fail;
    }
}

//note: this loadout code is for debug purposes
class HDUNM_Blues:HDPickup{
    default{
        -hdpickup.fitsinbackpack
        hdpickup.refid "UBL";
        tag " \ca? ? ?\c-";
    }
    states{
    spawn:
        PINS A -1; stop;
    pickup:
        TNT1 A 0{
            A_GiveInventory("HDBlues", invoker.amount); A_Log("\ca*** Unknown loadout code:  \"\cxubl\ca\"\c-");
        }fail;
    }
}

//kiwi insisted.
class HD_Unmaker:HDPickup{
    default{
        -hdpickup.fitsinbackpack
        hdpickup.refid "UNM";
        tag " \ca? ? ?\c-";
    }
    states{
    spawn:
        PINS A -1; stop;
    pickup:
        TNT1 A 0{
            A_GiveInventory("HDUnmaker", invoker.amount); A_Log("\ca*** Unknown loadout code:  \"\cxunm\ca\"\c-");
        }fail;
    }
}

class HDDemonKeyBase:HDPickup{
	string keytype;
	property keytype:keytype;
	string demonkeyname;
	property demonkeyname:demonkeyname;

	actor picktarget; //smh my head

	default{
		scale 0.6;
		radius 6;
		renderstyle "translucent";
		alpha 0.75;
		-hdpickup.fitsinbackpack
		+bright
		-hdpickup.droptranslation
		+inventory.invbar
		-hdpickup.notinpockets
		inventory.maxamount 1;
		inventory.interhubamount 1;
		hdpickup.bulk ENC_STIMPACK;
		tag "\cr(\cgITEM NAME NOT FOUND\cr)\c-";
	}

	override void doeffect(){
		if(!keytype||!amount)destroy();
	}

	action void A_Zap(){
			lingeringthunderred.zap(self,invoker,invoker,15,true);
	}

	states{
	spawn:
		ART1 A 1; //GROSS HACK
		stop;

	use:
		---- A 0 A_JumpIfInventory(invoker.keytype,1,"incap");
		---- A 0 A_JumpIfInventory("HDUnmaker",1,"givekey");
		goto incap;
		givekey:
		---- A 0{
 A_StartSound("brain/spit",CHAN_ITEM|CHANF_OVERLAP);
A_GiveInventory(invoker.keytype);
damagemobj(self,self,1,"balefire");
A_GiveInventory("IsMoving",99);
		let hdp=HDPlayerPawn(self);
		if(hdp)
				hdp.usegametip("\cx"..HDDemonKeyBase.threat());
}
		#### ##### 1 A_SpawnItemEx("HDSmoke",0,0,0,random(4,0),random(-2,2),random(1,3),0,SXF_NOCHECKPOSITION);
		stop;

		incap:
		#### A 0 A_Zap();
		#### A 0{
			damagemobj(invoker,self,25,"balefire");
			for(int i=45;i<360;i+=90){
				A_SpawnItemEx("HDSmokeChunk",0,0,0,
					vel.x+frandom(-12,12),
					vel.y+random(-12,12),
					vel.z+frandom(4,16),
					0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM
				);
		}
			
		let hdp=HDPlayerPawn(self);
		if(hdp){
			hdp.incapacitated=1;
			hdp.incaptimer=700;}
		}
		#### A 0 A_DropItem(invoker.demonkeyname);
		stop;
	}

	const thcol="\cg";
	static string Threat(){
		string psss=Wads.ReadLump(Wads.CheckNumForName("threats",0));
		array<string> pss;pss.clear();
		psss.split(pss,"Threat ");
		pss.delete(0);
		string ps=pss[random(0,pss.size()-1)];
		ps=ps.mid(ps.indexof(" ")+1);
		ps=thcol..ps;
		ps.replace("/","\n"..thcol);
		ps.replace("|"," ");
		ps.replace("  "," ");
		ps.replace("\n"..thcol.." ","\n"..thcol);
		return ps;
	}

}

class HDOrangeDemonKey:HDDemonKeyBase{
	default{
		//$Category "Items/Hideous Destructor/FATAL ERROR"
		//$Title "Orange Demon Key"
		//$Sprite "ART1A0"
		inventory.icon "ART1A0";
		HDDemonKeyBase.KeyType "UnmakerUpgrade1Icon";
		inventory.pickupmessage "\cxOrange\c-, the symbol of Gluttony.";
		HDDemonKeyBase.demonkeyname "HDOrangeDemonKey";
		hdpickup.bulk ENC_STIMPACK;
		tag "\cr(\cgITEM NAME NOT FOUND\cr)\c-";
	}
	states{
	spawn:
		ART1 AABBCCDDEEDDCCBB 1 light("ROCKET"){A_SetTics(random(1,3)); if(!random(0,7))A_Zap();}
		loop;
	}
}

class HDPurpleDemonKey:HDDemonKeyBase{
	default{
		//$Category "Items/Hideous Destructor/FATAL ERROR"
		//$Title "Purple Demon Key"
		//$Sprite "ART2A0"
		inventory.icon "ART2A0";
		HDDemonKeyBase.KeyType "UnmakerUpgrade2Icon";
		inventory.pickupmessage "\ctPurple\c-, the symbol of Vanity and Pride.";
		HDDemonKeyBase.demonkeyname "HDPurpleDemonKey";
	}
	states{
	spawn:
		ART2 AABBCCDDEEDDCCBB 1 light("PLAZBALL"){A_SetTics(random(1,6)); if(!random(0,7))A_Zap();}
		loop;

	use:
		---- A 0 A_JumpIfInventory(invoker.keytype,1,"incap");
		---- A 0 A_JumpIfInventory("HDUnmaker",1,"check");
		goto incap;

	check:
		---- A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"givekey");
		goto incap;
	}
}
class HDCyanDemonKey:HDDemonKeyBase{
	default{
		//$Category "Items/Hideous Destructor/FATAL ERROR"
		//$Title "Cyan Demon Key"
		//$Sprite "ART3A0"
		inventory.icon "ART3A0";

		HDDemonKeyBase.KeyType "UnmakerUpgrade3Icon";
		inventory.pickupmessage "\czCyan\c-, the symbol of Lust.";
		HDDemonKeyBase.demonkeyname "HDCyanDemonKey";
	}
	states{
	spawn:
		ART3 AABBCCDDEEDDCCBB 1 light("HEALTHPOTION"){A_SetTics(random(1,9)); if(!random(0,7))A_Zap();}
		loop;

	use:
		---- A 0 A_JumpIfInventory(invoker.keytype,1,"incap");
		---- A 0 A_JumpIfInventory("HDUnmaker",1,"check");
		goto incap;

//gee, you think that giving yourself UnmakerUpgrade2Icon and trying to activate the cyan demon key works?
	check:
		---- A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"check2");
		goto incap;

	check2:
		---- A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"givekey");
		goto incap;
	}
}

class UnmakerBallLight:PointLight{
	override void postbeginplay(){
		super.postbeginplay();
		args[0]=206;
		args[1]=48;
		args[2]=52;
		args[3]=0;
		args[4]=0;
	}
	override void tick(){
		if(!target){
			args[3]+=random(-10,1);
			if(args[3]<1)destroy();
		}else{
			if(target.bmissile)args[3]=random(32,40);
			else args[3]=random(48,64);
			setorigin(target.pos,true);
		}
	}
}

class UnmakerBall:HDFireball{
	default{
		+extremedeath
		damagetype "balefire";
		activesound "cyber/ballhum";
		seesound "weapons/plasmaf";
		decal "scorch";
		gravity 0;
		height 6;radius 6;
		speed 50;
		scale 0.4;
		damagefunction(256);
		Translation "112:127=176:191", "224:231=170:175", "168:168=170:170";
	}
	actor lite;
	string pcol;
	override void postbeginplay(){
		super.postbeginplay();
		lite=spawn("UnmakerBallLight",pos,ALLOW_REPLACE);lite.target=self;
		A_TakeFromTarget("HDMagicShield",40);
	}
	states{
	spawn:
		BFS1 A 0{
			if(stamina>40||!target||target.health<1)return;  
			stamina++;
			actor tgt=target.target;
			if(tgt&&checksight(tgt)){
				vel*=0.92;
				vel+=(tgt.pos-pos+tgt.vel*10+(0,0,tgt.height)).unit()*10;
			}
		}
		BFS1 ABAB 1 bright{
			for(int i=0;i<10;i++){
				A_SpawnParticle("ff 55 88",SPF_RELATIVE|SPF_FULLBRIGHT,35,frandom(1,4),0,
					frandom(-8,8)-5*cos(pitch),frandom(-8,8),frandom(0,8)+sin(pitch)*5,
					frandom(-1,1),frandom(-1,1),frandom(1,2),
					-0.1,frandom(-0.1,0.1),-0.05
				);
			}
			scale=(1,1)*frandom(0.35,0.45);
		}loop;
	death:
		BFE1 A 1 bright{
			spawn("HDSmoke",pos,ALLOW_REPLACE);
			A_StartSound("weapons/bfgx",CHAN_BODY,volume:0.4);
			damagetype="thermal";
			bextremedeath=false;
			A_Explode(128,64);
			if(lite)lite.args[3]=128;
			DistantQuaker.Quake(self,2,35,512,10);

			//hit map geometry
			if(
				blockingline||
				floorz>=pos.z||  
				ceilingz-height<=pos.z
			){
				A_SpawnChunks("HDSmoke",3,2,3);
				A_SpawnChunks("HugeWallChunk",50,4,20);
			}

			//teleport victim
			if(
				blockingmobj
				&&!blockingmobj.player
				&&!blockingmobj.special
				&&(
					!blockingmobj.bismonster
					||blockingmobj.health<1
				)
				&&!random(0,3)
			){
				spawn("TeleFog",blockingmobj.pos,ALLOW_REPLACE);
				blockingmobj.setorigin(level.PickDeathmatchStart(),false);
				blockingmobj.vel=(frandom(-10,10),frandom(-10,10),frandom(10,20));
				spawn("TeleFog",blockingmobj.pos,ALLOW_REPLACE);
			}
		}
		BFE1 BBCDDEEE 2 bright A_FadeOut(0.05);
		stop;
	}
}

class UnmakerBallGuided:UnmakerBall{
default{+seekermissile}
	states{
	spawn:
		BFS1 A 0{
			if(stamina>40||!target||target.health<1)return;  
			stamina++;
			actor tgt=target.target;
			A_StartSound(activesound,CHAN_BODY,volume:0.4);
			A_SeekerMissile(10,20,SMF_PRECISE
			|SMF_CURSPEED);
			A_FaceTarget(20,20);
		}
		BFS1 ABAB 1 bright{
			for(int i=0;i<10;i++){
				A_SpawnParticle("ff 55 88",SPF_RELATIVE|SPF_FULLBRIGHT,35,frandom(1,4),0,
					frandom(-8,8)-5*cos(pitch),frandom(-8,8),frandom(0,8)+sin(pitch)*5,
					frandom(-1,1),frandom(-1,1),frandom(1,2),
					-0.1,frandom(-0.1,0.1),-0.05
				);
			}
			scale=(1,1)*frandom(0.35,0.45);
			If(special1>=350)
			{ A_Die(); A_Stop(); SetStateLabel("Death"); A_Scream(); Return;}
			special1++;
			Tracer=Null;
			If(Master && Master.Tracer)
			Tracer=Master.Tracer;
			//Unlike A_SeekerMissile, only seeks the laser if it's under its field of view and can do some better vertical seeking.
			If(Tracer && A_JumpIfTargetInLOS("Null",45,JLOSF_PROJECTILE|JLOSF_CHECKTRACER))
			{
				A_FaceTracer(0,0);
				Pitch*=-1;
				Vel=((Cos(Angle)*Speed)*Cos(-Pitch),(Sin(Angle)*Speed)*Cos(-Pitch),Sin(Pitch)*Speed);
			}
		}loop;
	}
}

class BFGPuffUnmaker:RedParticleFountain{
	default{
		-invisible /*+nointeraction*/ +forcexybillboard +bloodlessimpact
		+noblood +alwayspuff -allowparticles +puffonactors +puffgetsowner +forceradiusdmg
		+hittracer
		renderstyle "add";
		damagetype "BFGBallAttack";
		Translation "112:127=176:191", "224:231=170:175", "168:168=170:170";
		scale 0.8;
		obituary "%o got zapped by a powerful demonic attack and was unmade from existence.";
	}
	states{
	spawn:
		BFE2 A 1 bright nodelay{
			if(target)target=target.target;
			A_StartSound("misc/bfgrail",9005);
		}
		BFE2 A 3 bright{
			A_Explode(random(160,640),320,0);

			//teleport victim
			if(
				tracer
				&&tracer!=target
				&&!tracer.player
				&&!tracer.special
				&&(
					!tracer.bismonster
					||tracer.health<1
				)
				&&!random(0,3)
			){
				spawn("TeleFog",tracer.pos,ALLOW_REPLACE);

				vector3 teleportedto=(0,0,0);

				thinkeriterator mobfinder=thinkeriterator.create("HDMobBase");
				actor mo;
				int ccc=level.killed_monsters;
				while(mo=HDMobBase(mobfinder.next())){
					if(ccc<1)break;
					if(mo.health>0)continue;
					ccc--;
					setz(mo.spawnpoint.z);
					if(checkmove(mo.spawnpoint.xy)){
						teleportedto=mo.spawnpoint;
						break;
					}
				}

				if(teleportedto==(0,0,0))teleportedto=(
					frandom(-20000,20000),
					frandom(-20000,20000),
					frandom(-20000,20000)
				);

				tracer.setorigin(teleportedto,false);
				tracer.setz(clamp(tracer.pos.z,tracer.floorz,tracer.ceilingz-tracer.height));
				tracer.vel=(frandom(-10,10),frandom(-10,10),frandom(10,20));
				spawn("TeleFog",tracer.pos,ALLOW_REPLACE);
			}
		}
		BFE2 ABCDE 2 bright A_FadeOut(0.1);
		stop;
	}
}

class EgonUnmaker:RedParticleFountain{
	default{
		-invisible /*+nointeraction*/ +forcexybillboard +bloodlessimpact
		+noblood +alwayspuff -allowparticles +puffonactors +puffgetsowner +forceradiusdmg
		+hittracer
		renderstyle "add";
		decal "scorch";
		damagetype "Unmaker";
		Translation "112:127=176:191", "224:231=170:175", "168:168=170:170";
		scale 0.8;
		obituary "%o got continuously unmade from existence.";
	}
	states{
	spawn:
		BFE2 A 1 bright nodelay{
			if(target)target=target.target;
			A_StartSound("misc/bfgrail",9005);
		}
		BFE2 A 3 bright{
			A_Explode(random(20,160),32,0);

			//experimental - apparently this didn't work
/*
			if(
				blockingline||

				floorz>=pos.z||
				ceilingz-height<=pos.z
			){
				bmissilemore=true;
				if(blockingline)doordestroyer.destroydoor(self,200,frandom(24,48),6);
			}
*/

/*
			//teleport victim
			if(
				tracer
				&&tracer!=target
				&&!tracer.player
				&&!tracer.special
				&&(
					!tracer.bismonster
					||tracer.health<1
				)
				&&!random(0,3)
			){
				spawn("TeleFog",tracer.pos,ALLOW_REPLACE);

				vector3 teleportedto=(0,0,0);

				thinkeriterator mobfinder=thinkeriterator.create("HDMobBase");
				actor mo;
				int ccc=level.killed_monsters;
				while(mo=HDMobBase(mobfinder.next())){
					if(ccc<1)break;
					if(mo.health>0)continue;
					ccc--;
					setz(mo.spawnpoint.z);
					if(checkmove(mo.spawnpoint.xy)){
						teleportedto=mo.spawnpoint;
						break;
					}
				}

				if(teleportedto==(0,0,0))teleportedto=(
					frandom(-20000,20000),
					frandom(-20000,20000),
					frandom(-20000,20000)
				);

				tracer.setorigin(teleportedto,false);
				tracer.setz(clamp(tracer.pos.z,tracer.floorz,tracer.ceilingz-tracer.height));
				tracer.vel=(frandom(-10,10),frandom(-10,10),frandom(10,20));
				spawn("TeleFog",tracer.pos,ALLOW_REPLACE);
			}*/
		}
		---- A 0 A_Quake(2,32,0,128);
		BFE2 ABCDE 2 bright A_FadeOut(0.1);
		stop;
	}
}

class UnmakerShotsFired: Inventory {default{inventory.maxamount 111;}}

class HDUnmaker:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "The Unmaker"
		//$Sprite "UMKRZ0"
		inventory.icon "unkna0";

		weapon.selectionorder 70;
		weapon.slotnumber 7;
		weapon.kickback 200;

		weapon.bobrangex 0.4;
		weapon.bobrangey 1.1;
		weapon.bobspeed 1.8;
		weapon.bobstyle "normal";
		scale 0.6;
		inventory.pickupmessage "\cgFATAL E\crWHAT THE FUCK IS THIS?!?! --MGMT";
		obituary "%o was completely unmade by %k.";
		hdweapon.barrelsize 32,3.5,7;
		tag "\cr* * ( \cgWEAPON NAME NOT FOUND \cr) * *\c-";
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}

	override double gunmass(){
		return 16;
	}
	override double weaponbulk(){
		return 256;
	}

  override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
 if(hdw.weaponstatus[1]>0)sb.drawwepnum(hdw.weaponstatus[1],50);
  sb.drawimage("PNTAA0",(-56,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1,1));
   }
  
		sb.drawrect(-19,-11,3,1);
	}

	override string gethelptext(){
		return
		"\cgFATAL ERROR\c-\n"
		"\n"
		"WEAPON ID AND\n"
		"ORIGIN NOT FOUND\n"
		"\n"
		"ERROR CODE: 0x80666AE23"
		;
	}

	bool alt;
	int battery;

	static void ThunderZap(
		actor caller,
		double zoffset=32,
		bool alt=false,
		int battery=20
	){
		//determine angle
		double shootangle=caller.angle;
		double shootpitch=caller.pitch;
		let hdp=hdplayerpawn(caller);
		if(hdp&&hdp.scopecamera){
			shootangle=hdp.scopecamera.angle;
			shootpitch=hdp.scopecamera.pitch;
		}
		if(alt){
			shootangle+=frandom(-1.2,1.2);
			shootpitch+=frandom(-1.3,1.1);
		}

		//create the line
		flinetracedata tlt;
		caller.linetrace(
			shootangle,
			8000+200*battery,
			shootpitch,
			flags:TRF_NOSKY,
			offsetz:zoffset,
			data:tlt
		);
		if(
			tlt.hittype==Trace_HitNone
			||(
				tlt.hitline&&(
					tlt.hitline.special==Line_Horizon
					||(
						tlt.linepart==2
						&&tlt.hitsector.gettexture(0)==skyflatnum
					)||(
						tlt.linepart==1
						&&tlt.hitline.sidedef[1]
						&&hdmath.oppositesector(tlt.hitline,tlt.hitsector).gettexture(0)==skyflatnum
					)
				)
			)
		)return;

		//alt does a totally different thing
		if(alt){
			if(tlt.hittype==Trace_HitNone||tlt.distance>2000)return;
			actor bbb=spawn("BeamSpotFlashRed",tlt.hitlocation-tlt.hitdir,ALLOW_REPLACE);
			if(!random(0,3))(lingeringthunderred.zap(bbb,bbb,caller,40,true));
			beamspotflash(bbb).impactdistance=tlt.distance-16*battery;
			bbb.angle=caller.angle;
			bbb.A_SprayDecal("Scorch",12);
			bbb.pitch=caller.pitch;
			bbb.target=caller;
			bbb.tracer=tlt.hitactor; //damage inflicted on the puff's end
			return;
		}

		int basedmg=int(max(0,20-tlt.distance*(1./50.)));
		int dmgflags=caller&&caller.player?DMG_PLAYERATTACK:0; //don't know why the player damagemobj doesn't work

		//wet actor
		if(tlt.hitactor){
			actor hitactor=tlt.hitactor;
			if(hitactor.bloodtype=="ShieldNotBlood"){
				hitactor.damagemobj(null,caller,random(1,(battery<<2)),"Balefire",dmgflags);
			}else if(
				hitactor.bnodamage
				||(hitactor.bnoblood&&!random(0,3))
				||hitactor.bloodtype=="NotQuiteBloodSplat"
				||hitactor.countinv("ImmunityToFire")
				||!random(0,7)
				||HDWoundFixer.CheckCovered(hitactor,true)
			){
				//dry actor - ping damage and continue
				if(!random(0,5))(lingeringthunderred.zap(hitactor,hitactor,caller,40,true));
				hdf.give(hitactor,"Heat",(basedmg>>1));
				hitactor.damagemobj(null,caller,1,"electrical",dmgflags);
			}else{
				//wet actor
				if(!random(0,7))(lingeringthunderred.zap(hitactor,hitactor,caller,(basedmg<<1),true));
				hdf.give(hitactor,"Heat",(basedmg<<1));
				hitactor.damagemobj(null,caller,basedmg,"electrical",dmgflags);
				actor sss=spawn("HDGunsmoke",tlt.hitlocation,ALLOW_REPLACE);
				sss.vel=(0,0,1)-tlt.hitdir;
				return;
			}
		}
		//where where the magic happens happens
		actor bbb=spawn("BeamSpotRed",tlt.hitlocation-tlt.hitdir,ALLOW_REPLACE);
		bbb.target=caller;
		bbb.stamina=basedmg;
		bbb.angle=caller.angle;
		bbb.pitch=caller.pitch;
	}

	action void A_ThunderZap(){
		hdunmaker.thunderzap(self,32,0,50);
	}

	Bool Laser;
	Actor Rocket;
	Action Void A_UnmakerGuide()
	{
		If(Health<1 || !Invoker.Laser)
		Return;
		Double Range=0x7fffffff;
		FTranslatedLineTarget t;
		double slope = AimLineAttack (angle, range, t);
		Actor puff = LineAttack (angle, range, slope, 0, 'Normal', "UnmakerGuide", LAF_NORANDOMPUFFZ, t);
		if(puff)
		{
			Invoker.Tracer=Puff;
			Puff.bNoTimeFreeze=True;
			//Puff.Tics=1;
		}
	}

	Action Void A_FireGuidedUnmakerBall()
	{
		Actor Rock=A_FireProjectile("UnmakerBallGuided");
		If(Rock)
		{
			Double Range=0x7fffffff;
			FTranslatedLineTarget t;
			double slope = AimLineAttack (angle, range, t);

			Actor puff = LineAttack (angle, range, slope, 0, 'Normal', "BlankPuffUnmaker", LAF_NORANDOMPUFFZ, t);
			if (puff)
			{
				Puff.bNoTimeFreeze=False;
				Puff.Tics=35;
				Puff.bNoInterAction=True;
				Rock.Tracer=Puff;
				If(Invoker.Laser)
				{
					Rock.Master=Player.ReadyWeapon;
					Invoker.Rocket=Rock;
				}
			}
		}
	}

	//preserved just in case matt decided to nuke A_UnmakeLevel.
	//nothing to see here, go away
	action void A_UnmakeLevelUnmaker(int unmintensity=1){HDUnmaker.UnmakeLevelUnmaker(unmintensity);}
	static void UnmakeLevelUnmaker(int unmintensity=1){
		for(int k=0;k<unmintensity;k++){
			sector thissector=level.sectors[random(0,level.sectors.size()-1)];
			int dir=random(-3,3);
			double zatpoint=thissector.floorplane.ZAtPoint(thissector.centerspot);
			thissector.MoveFloor(dir,zatpoint,0,zatpoint>0?-1:1,false);
			dir=random(-3,3);
			zatpoint=thissector.ceilingplane.ZAtPoint(thissector.centerspot);
			thissector.MoveCeiling(dir,zatpoint,0,zatpoint>0?-1:1,false);
			thissector.changelightlevel(random(-random(3,4),3));
			//then maybe add some textures
			textureid shwal;
			switch(random(0,4)){
			case 1:
				shwal=texman.checkfortexture("WALL63_2",texman.type_any);break;
			case 2:
				shwal=texman.checkfortexture("W94_1",texman.type_any);break;
			case 3:
				shwal=texman.checkfortexture("FIREBLU1",texman.type_any);break;
			case 4:
				shwal=texman.checkfortexture("SNAK"..random(7,8).."_1",texman.type_any);break;
			default:
				shwal=texman.checkfortexture("ASHWALL2",texman.type_any);break;
			}
			for(int i=0;i<thissector.lines.size();i++){
				line lnn=thissector.lines[i];
				for(int j=0;j<2;j++){
					if(!lnn.sidedef[j])continue;
					if(!lnn.sidedef[j].GetTexture(side.top))lnn.sidedef[j].SetTexture(side.top,shwal);
					if(!lnn.sidedef[j].GetTexture(side.bottom))lnn.sidedef[j].SetTexture(side.bottom,shwal);
				}
			}
		}
	}

	states{
	CrosshairStuff:
		TNT1 A 1 A_UnmakerGuide();
		loop;

	select0:
		UMKR A 0{
				if(invoker.weaponstatus[UNMS_GUIDED]==1){
				A_Overlay(15,"CrosshairStuff");
				Invoker.Laser=true;
				}
			}
		goto select0bfg;
	deselect0:
		UMKR A 0{
				if(invoker.weaponstatus[UNMS_GUIDED]==1){
				A_ClearOverlays(15,15);
				Invoker.Laser=false;
				}
				if(invoker.weaponstatus[UNMS_PISSING]==1){
				A_StartSound("weapons/unmakerbeamend",CHAN_WEAPON);
				invoker.weaponstatus[UNMS_PISSING]=0;
				Invoker.bundroppable=false;
				}
			}
		goto deselect0big;

	select1:
		UMKR A 0{
				if(invoker.weaponstatus[UNMS_GUIDED]==1){
				A_Overlay(15,"CrosshairStuff");
				}
			}
		goto select1bfg;
	deselect1:
		UMKR A 0{
				if(invoker.weaponstatus[UNMS_GUIDED]==1){
				A_ClearOverlays(15,15);
				}
			}
		goto deselect1big;

	ready:

		UMKR A 0 A_JumpIfInventory("UnmakerShotsFired",111,"CommitDie");

		UMKR A 1{
			A_JumpIfInventory("UnmakerShotsFired",111,"CommitDie");
			A_WeaponReady(WRF_ALL);
}
		goto readyend;

	CheckCall:
		UMKR A 0 A_Jump(96,"NotThisTime");
		goto continueinevitable;

//Armageddon happens here. Spawns a boss enemy.
	CommitDie:
		UMKR A 0 A_ClearRefire(); //mugshot.
		UMKR A 1 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"CheckCall");
	continueinevitable:
		UMKR A 0 A_JumpIfInventory("SpiritualArmour",1,"NotThisTime"); //Unless if you have Spiritual Armor.
		UMKR A 0{
		    A_Quake(5,40,0,512,"brain/cube");
		    invoker.buntossable=true;
				if(invoker.weaponstatus[UNMS_GUIDED]==1){
				A_ClearOverlays(15,15);
				Invoker.Laser=false;
				invoker.weaponstatus[UNMS_GUIDED]=0;
				}
		}
		UMKR AAAAABBBBAAAAABBBBAAAAABBBBAAAABBAABBAABB 1 A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
	goto confiscate;
	kill:
		UMKR A 1{
			A_TakeInventory("UnmakerShotsFired",111);
			damagemobj(invoker,self,10000,"suicide");
			A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
			invoker.buntossable=false;
			for(int i=45;i<360;i+=90){
				A_SpawnItemEx("HDExplosion",
					4,-4,20,vel.x,vel.y,vel.z+1,i,
					SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_ABSOLUTEMOMENTUM
				);
				A_SpawnItemEx("HDSmokeChunk",0,0,0,
					vel.x+frandom(-12,12),
					vel.y+random(-12,12),
					vel.z+frandom(4,16),
					0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEMOMENTUM
				);
		}
			A_Quake(3,26,0,220,"none");
	    invoker.destroy();
		}
		goto ready;
	
	//confiscate the keys and/or the weapon itself
	confiscate:
		UMKR A 1{
				let archon = spawn("BaronUnmaker",pos,
				ALLOW_REPLACE);
				if(archon){
				if(countinv("UnmakerUpgrade1Icon")){
			archon.A_GiveInventory("UnmakerUpgrade1Icon");
			A_TakeInventory("UnmakerUpgrade1Icon",1);
		}	
				if(countinv("UnmakerUpgrade2Icon")){
			archon.A_GiveInventory("UnmakerUpgrade2Icon");
			A_TakeInventory("UnmakerUpgrade2Icon",1);
		}	
				if(countinv("UnmakerUpgrade3Icon")){
			archon.A_GiveInventory("UnmakerUpgrade3Icon");
			A_TakeInventory("UnmakerUpgrade3Icon",1);
			}	
		}	
	}
	goto kill;

//Save the player from the Inevitable in exchange for a layer of Spiritual Armor.
	NotThisTime:
		UMKR A 0{
	if(countinv("UnmakerUpgrade2Icon") &&
		!random(0,6))
		TakeInventory("UnmakerShotsFired",111);
		else{
			A_TakeInventory("UnmakerShotsFired",111);
			A_TakeInventory("SpiritualArmour",1);}
			A_Quake(1,40,0,512,"brain/cube");
		    invoker.buntossable=true;
		}
		UMKR AAAAABBBBAAAAABBBBAAAAABB 1 A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
		UMKR BBAAAABBAABBAABB 1 A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
		UMKR A 0{
		    invoker.buntossable=false;
						A_GiveInventory("BlackoutEffect", 1, AAPTR_PLAYER1);
						A_GiveInventory("BlackoutEffect", 1, AAPTR_PLAYER2);
						A_GiveInventory("BlackoutEffect", 1, AAPTR_PLAYER3);
						A_GiveInventory("BlackoutEffect", 1, AAPTR_PLAYER4);
						A_GiveInventory("BlackoutEffect", 1, AAPTR_PLAYER5);
						A_GiveInventory("BlackoutEffect", 1, AAPTR_PLAYER6);
						A_GiveInventory("BlackoutEffect", 1, AAPTR_PLAYER7);
						A_GiveInventory("BlackoutEffect", 1, AAPTR_PLAYER8);
						}
		UMKR AAAAAAAAAA 0{
						if (hdunm_unmake)
						{
							A_UnmakeLevelUnmaker(100);
						}
					}
		goto ready;

/*
Here if you really insist:

Fire - Detonate
Alt-Fire - continous beam attack (requires the Cyan Demon Key)
Firemode - BFG-Like projectile (requires the Orange Demon Key)
Zoom + Altfire - Laser (akin to original doom 64's)
Zoom + Fire - Fire a scattershot railgun attack (requires the Purple Demon Key)
Reload - Aggrevate (use blues first. otherwise, get aggrevated damage)
Zoom + Reload - Toggle guidance system (Requires the Purple Demon Key)
Unload - Remove a demon key

50/200 blues or 50/25 aggro

Cyan Demon Key - Reduces the amount of aggro taken by 50% on every reload
Orange Demon Key - Expands the capacity to 200
Purple Demon Key - Has a chance to save you from the inevitable with or without having spiritual armor (if you have one, it'll be overridden, saving the layer of Spiritual Armor).
*/

	altfire:
		UMKR A 0 A_JumpIf(pressingzoom(),"semiautobeam");
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>0)
			setweaponstate("beam");
			}
		goto nope;
	althold:
		goto nope;
	semiautobeam:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"FullAutoBeamA");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"FullAutoBeamB");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"FullAutoBeamC");
		UMKR B 1{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				A_GunFlash();

			A_FireProjectile("UnmakerBeam",0,0,0,0,FPF_NOAUTOAIM);
			A_GiveInventory("UnmakerShotsFired",1);
			}else setweaponstate("nope");
			}
		UMKR A 1;
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				invoker.weaponstatus[UNMS_MAG]--;
			}

				A_WeaponReady(WRF_NOFIRE);
		}
		UMKR A 0 A_JumpIfInventory("UnmakerShotsFired",111,"CommitDie");
		goto picknegativeeffects;

	FullAutoBeamA:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"TwoBeamsC");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"TwoBeamsB");
		goto FullAutoBeamActual;

	FullAutoBeamB:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"TwoBeamsC");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"TwoBeamsA");
		goto FullAutoBeamActual;

	FullAutoBeamC:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"TwoBeamsB");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"TwoBeamsA");
	FullAutoBeamActual:
		UMKR B 1{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				A_GunFlash();
			A_FireProjectile("UnmakerBeam",0,0,0,0,FPF_NOAUTOAIM);
			A_GiveInventory("UnmakerShotsFired",1);
			}else setweaponstate("nope");
			}
		UMKR AAAAA 1 A_WeaponReady(WRF_NONE);
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				invoker.weaponstatus[UNMS_MAG]--;
			}

				A_WeaponReady(WRF_NONE);
				
		}
		UMKR A 0 A_JumpIfInventory("UnmakerShotsFired",111,"CommitDie");
		UMKR A 0 A_Refire("FullAutoBeamActual");
		goto picknegativeeffects;

	TwoBeamsA:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"ThreeBeams");
		goto TwoBeamsActual;

	TwoBeamsB:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"ThreeBeams");
		goto TwoBeamsActual;

	TwoBeamsC:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"ThreeBeams");
	TwoBeamsActual:
		UMKR B 1{
			if(invoker.weaponstatus[UNMS_MAG]>1){
				A_GunFlash();
			A_FireProjectile("UnmakerBeam",3,0,0,0,FPF_NOAUTOAIM);
			A_FireProjectile("UnmakerBeam",-3,0,0,0,FPF_NOAUTOAIM);
			A_GiveInventory("UnmakerShotsFired",2);
			}else setweaponstate("nope");
			}
		UMKR A 1;
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				invoker.weaponstatus[UNMS_MAG]-=2;
			}

				A_WeaponReady(WRF_NOFIRE);
		}
		UMKR A 0 A_JumpIfInventory("UnmakerShotsFired",111,"CommitDie");
		goto picknegativeeffects;

	ThreeBeams:
		UMKR B 1{
			if(invoker.weaponstatus[UNMS_MAG]>2){
				A_GunFlash();
			A_FireProjectile("UnmakerBeam",3,0,0,0,FPF_NOAUTOAIM);
			A_FireProjectile("UnmakerBeam",0,0,0,0,FPF_NOAUTOAIM);
			A_FireProjectile("UnmakerBeam",-3,0,0,0,FPF_NOAUTOAIM);
			A_GiveInventory("UnmakerShotsFired",3);
			}else setweaponstate("nope");
			}
		UMKR A 1;
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				invoker.weaponstatus[UNMS_MAG]-=3;
			}

				A_WeaponReady(WRF_NOFIRE);
		}
		UMKR A 0 A_JumpIfInventory("UnmakerShotsFired",111,"CommitDie");
		goto picknegativeeffects;

	Beam:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"Beam2");
		goto nope;

	Beam2:
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]<1)
			setweaponstate("nope");
			}
	Beam2a:
		UMKR A 0{
		    A_GiveInventory("UnmakerShotsFired",10);
		    invoker.buntossable=true;
			invoker.weaponstatus[UNMS_TICS]=0;
			invoker.weaponstatus[UNMS_PISSING]=1;
			A_StartSound("weapons/unmakerbeamstart",CHAN_WEAPON);
		}
	Beam2Loop:
		UMKR B 1{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				A_GunFlash("flashsilent");
			A_ZoomRecoil(1.2);
			A_CustomRailgun ((10),0,"","ff 55 88",
					RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,0,50.0,"EgonUnmaker",0,0,0,1,0.2);
						if (hdunm_unmake)
						{
							A_UnmakeLevelUnmaker(10);
						}
			invoker.weaponstatus[UNMS_TICS]++;
			}else setweaponstate("BeamEnd");
			}
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_SUBMAG]<1){
				invoker.weaponstatus[UNMS_MAG]--;
				invoker.weaponstatus[UNMS_SUBMAG]+=10;
			}else
			invoker.weaponstatus[UNMS_SUBMAG]--;
		}

		UMKR A 0{
if(invoker.weaponstatus[UNMS_TICS]>105)A_Refire("Beam3");
		}
		UMKR A 0 A_Refire("Beam2Loop");
		goto BeamEnd;

	Beam3:
		UMKR A 0{
			invoker.buntossable=true;
			A_StartSound("weapons/unmakerbeamloop",CHAN_WEAPON,CHANF_LOOPING);
		}
	Beam3Loop:
		UMKR B 1{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				A_GunFlash("flashsilent");
			A_ZoomRecoil(1.2);
			A_CustomRailgun ((10),0,"","ff 55 88",
					RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,0,50.0,"EgonUnmaker",0,0,0,1,0.2);
						if (hdunm_unmake)
						{
							A_UnmakeLevelUnmaker(10);
						}
			}else setweaponstate("BeamEnd");
			}
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_SUBMAG]<1){
				invoker.weaponstatus[UNMS_MAG]--;
				invoker.weaponstatus[UNMS_SUBMAG]+=10;
			}else{
			invoker.weaponstatus[UNMS_SUBMAG]--;
		}
				A_WeaponReady();
		}
		UMKR A 0 A_Refire("Beam3Loop");
		goto BeamEnd;

	BeamEnd:
		UMKR B 1{
			invoker.buntossable=false;
			invoker.weaponstatus[UNMS_PISSING]=0;
			A_StartSound("weapons/unmakerbeamend",CHAN_WEAPON);
				A_CustomRailgun((5),0,"","ff 55 88",
					RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,
					0,50.0,"EgonUnmaker",0,0,2048,18,0.2,1.0);
						if (hdunm_unmake)
						{
							A_UnmakeLevelUnmaker(1);
						}
			}
		UMKR A 1;
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>0){
			if(invoker.weaponstatus[UNMS_SUBMAG]<1){
				invoker.weaponstatus[UNMS_MAG]--;
				invoker.weaponstatus[UNMS_SUBMAG]+=10;
			}else{
			invoker.weaponstatus[UNMS_SUBMAG]--;
		}
			}
				
		}
		UMKR A 1 A_WeaponReady(WRF_NOFIRE);
		UMKR A 0 A_JumpIfInventory("UnmakerShotsFired",111,"CommitDie");
		goto picknegativeeffects;

	user2:
	CyberProjectile:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"CyberProjectile2");
		goto nope;

	CyberProjectile2:
		UMKR B 1{
			if(invoker.weaponstatus[UNMS_MAG]>5){
				A_GunFlash();
			if(invoker.weaponstatus[UNMS_GUIDED]==1)
				A_FireGuidedUnmakerBall();
				else

			A_FireProjectile("UnmakerBall");

			A_GiveInventory("UnmakerShotsFired",1);
			}else setweaponstate("nope");
			}
		UMKR A 1;
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				invoker.weaponstatus[UNMS_MAG]-=5;
			}
				A_WeaponReady(WRF_NOFIRE);
		}
		UMKR A 0 A_JumpIfInventory("UnmakerShotsFired",111,"CommitDie");
		goto picknegativeeffects;

	BEEEEEEEFFFGEEEE:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"BEEEEEEEFFFGEEEE2");
		goto nope;

	BEEEEEEEFFFGEEEE2:
		UMKR B 1{
			if(invoker.weaponstatus[UNMS_MAG]>9){
				A_GunFlash();
			A_ZoomRecoil(0.5);
		A_MuzzleClimb(-frandom(0.34,0.4),
		-frandom(0.5,0.6),-frandom(0.34,0.4),
		-frandom(0.5,0.6));
				A_CustomRailgun((0),0,"","ff 55 88",
					RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,
					0,50.0,"BFGPuffUnmaker",5,4,2048,18,0.2,1.0);
				A_CustomRailgun((0),0,"","ff 55 88",
					RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,
					0,50.0,"BFGPuffUnmaker",5,4,2048,18,0.2,1.0);
				A_CustomRailgun((0),0,"","ff 55 88",
					RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,
					0,50.0,"BFGPuffUnmaker",5,4,2048,18,0.2,1.0);
				A_CustomRailgun((0),0,"","ff 55 88",
					RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,
					0,50.0,"BFGPuffUnmaker",5,4,2048,18,0.2,1.0);
				A_CustomRailgun((0),0,"","ff 55 88",
					RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,
					0,50.0,"BFGPuffUnmaker",5,4,2048,18,0.2,1.0);
				A_CustomRailgun((0),0,"","ff 55 88",
					RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,
					0,50.0,"BFGPuffUnmaker",5,4,2048,18,0.2,1.0);
				A_CustomRailgun((0),0,"","ff 55 88",
					RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,
					0,50.0,"BFGPuffUnmaker",5,4,2048,18,0.2,1.0);
				A_CustomRailgun((0),0,"","ff 55 88",
					RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,
					0,50.0,"BFGPuffUnmaker",5,4,2048,18,0.2,1.0);
				A_CustomRailgun((0),0,"","ff 55 88",
					RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,
					0,50.0,"BFGPuffUnmaker",5,4,2048,18,0.2,1.0);
				A_CustomRailgun((0),0,"","ff 55 88",
					RGF_CENTERZ|RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,
					0,50.0,"BFGPuffUnmaker",5,4,2048,18,0.2,1.0);
			A_GiveInventory("UnmakerShotsFired",1);
			}else setweaponstate("nope");
			}
		UMKR A 1;
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				invoker.weaponstatus[UNMS_MAG]-=10;
			}
				A_WeaponReady(WRF_NOFIRE);
		}
		UMKR A 0 A_JumpIfInventory("UnmakerShotsFired",111,"CommitDie");
		goto picknegativeeffects;

	fire:
		UMKR A 0 A_JumpIf(pressingfiremode(),"CyberProjectile");
		UMKR A 0 A_JumpIf(pressingzoom(),"BEEEEEEEFFFGEEEE");
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>4)
			setweaponstate("fire2");
			}
		goto nope;

	hold:
		UMKR A 1{
			if(invoker.weaponstatus[UNMN_SEMIONLY]==1)
			setweaponstate("nope");
		}goto fire2;
	fire2:
		UMKR BBBBBBBBBBBBBBBBBB 0 bright light("FIRE")A_ThunderZap(); //doubled it. take it or leave it.
		UMKR B 1{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				A_GunFlash();
			A_GiveInventory("UnmakerShotsFired",1);
			}else setweaponstate("nope");

			}
		UMKR A 1;
		UMKR A 0{
			if(invoker.weaponstatus[UNMS_MAG]>0){
				invoker.weaponstatus[UNMS_MAG]-=4;
			}
				
		}
		UMKR A 1 A_WeaponReady(WRF_NOFIRE);
		goto picknegativeeffects;
	flash:
		UMKR B 0{
			A_AlertMonsters();

			A_ZoomRecoil(0.95);
		}
		UMKR F 1 bright{
			HDFlashAlpha(32);
			A_Light1();
		}
		TNT1 A 0 A_MuzzleClimb(-frandom(0.34,0.4),-frandom(0.5,0.6),-frandom(0.34,0.4),-frandom(0.5,0.6));
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"ConfirmationA");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"ConfirmationB");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"ConfirmationC");
		goto soundvanilla;
	soundvanilla:
		UMKR B 0 A_StartSound("weapons/unmaker",CHAN_WEAPON,volume:1);
		goto lightdone;

	soundfuckedup1:
		UMKR B 0 A_StartSound("weapons/unmaker2",CHAN_WEAPON,volume:2.5);
		goto lightdone;

	soundfuckedup2:
		UMKR B 0 A_StartSound("weapons/unmaker3",CHAN_WEAPON,volume:2.5);
		goto lightdone;

	ConfirmationA:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"Confirmation2C");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"Confirmation2B");
		goto SoundVanilla;

	ConfirmationB:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"Confirmation2C");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"Confirmation2A");
		goto SoundVanilla;

	ConfirmationC:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"Confirmation2B");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"Confirmation2A");
		goto SoundVanilla;

	Confirmation2A:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"SoundFuckedUp2");
		goto SoundFuckedUp1;

	Confirmation2B:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"SoundFuckedUp2");
		goto SoundFuckedUp1;

	Confirmation2C:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"SoundFuckedUp2");
		goto SoundFuckedUp1;

	flashsilent:
		UMKR B 0{
			A_AlertMonsters();

			A_ZoomRecoil(0.95);
		}
		UMKR F 1 bright{
			HDFlashAlpha(32);
			A_Light1();
		}
		TNT1 A 0 A_MuzzleClimb(-frandom(0.34,0.4),-frandom(0.5,0.6),-frandom(0.34,0.4),-frandom(0.5,0.6));
		goto lightdone;

	reload:
		UMKR A 0 A_JumpIf(pressingzoom(),"GuidedMode");
		UMKR A 0{
	if(!countinv("UnmakerUpgrade1Icon") &&
		invoker.weaponstatus[UNMS_MAG]==50)
		setweaponstate("nope");
		else if(invoker.weaponstatus[UNMS_MAG]==200)
		setweaponstate("nope");
		}goto unmag;
	unmag:
		UMKR A 1 offset(0,34) A_SetCrosshair(21);
		UMKR A 1 offset(5,38);

		UMKR A 1 offset(10,42);
		UMKR B 2 offset(20,46) A_StartSound("misc/bulletflesh",CHAN_WEAPON);
		UMKR B 4 offset(30,52){
			A_MuzzleClimb(0.3,0.4);
			A_StartSound("misc/smallslop",CHAN_WEAPON);
		}
	pocketmag:
		UMKR BB 7 offset(34,54) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
	loadmag:
		UMKR B 0 A_StartSound("misc/smallslop",CHAN_WEAPON);
		UMKR B 6 offset(34,54) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		UMKR B 7 offset(34,52) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		UMKR B 10 offset(32,50);
		UMKR B 2 offset(32,49){
			/*if(owner.regenblues>49)invoker.regenblues-=50;
			else owner.aggrevateddamage+=50;*/
							givebody(max(0,11-health));
				damagemobj(invoker,self,10,"balefire");
				A_GiveInventory("IsMoving",5);
				A_StartSound("misc/gibbed",CHAN_BODY);
			setweaponstate("demonkeycheck");
		}

	loadmag2:
		UMKR B 2 offset(32,49){
			/*if(owner.regenblues>49)invoker.regenblues-=50;
			else owner.aggrevateddamage+=25;*/
							givebody(max(0,11-health));
				/*damagemobj(invoker,self,10,"bashing");*/
				A_GiveInventory("IsMoving",5);
				A_StartSound("misc/gibbed",CHAN_BODY);
			setweaponstate("demonkeycheck");
		}

	demonkeycheck:
		UMKR B 1 offset(32,49){	if(!countinv("UnmakerUpgrade1Icon"))invoker.weaponstatus[UNMS_MAG]=50;
	else invoker.weaponstatus[UNMS_MAG]=200;
			setweaponstate("applycostaggro");
		}

/*
Now deprecated because of regenblues int converting into an inventory flag.

	costcheck:
		UMKR B 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"costcheck2");
		UMKR B 1 offset(32,49){
		let hdp=hdplayerpawn(self);
	if(!countinv("UnmakerUpgrade3Icon")){
			if(hdp.regenblues>49)hdp.regenblues-=50;
			else hdp.aggravateddamage+=50;
	}else 		if(hdp.regenblues>49)hdp.regenblues-=50;
			else hdp.aggravateddamage+=25;
			setweaponstate("reloadend");
		}

	costcheck2:
		UMKR B 1 offset(32,49){
		let hdp=hdplayerpawn(self);
	if(!countinv("UnmakerUpgrade3Icon")){
			if(hdp.regenblues>199)hdp.regenblues-=200;
			else hdp.aggravateddamage+=50;
	}else 		if(hdp.regenblues>199)hdp.regenblues-=200;
			else hdp.aggravateddamage+=25;
			setweaponstate("reloadend");
		}
*/

//:GIMMEABREAK:
	applycostaggro:
		UMKR B 0 A_JumpIfInventory("UnmakerUpgrade1Icon",
		1,"applycostaggro2");
		UMKR B 0 A_JumpIfInventory("HDBlues",
		50,"applycostblues");
		UMKR B 1 offset(32,49){
		let hdp=hdplayerpawn(self);
	if(!countinv("UnmakerUpgrade3Icon")){
			hdp.aggravateddamage+=50;
	}else
			hdp.aggravateddamage+=25;
			setweaponstate("reloadend");
		}

	applycostaggro2:
		UMKR B 0 A_JumpIfInventory("HDBlues",
		200,"applycostblues");
		UMKR B 1 offset(32,49){
		let hdp=hdplayerpawn(self);
	if(!countinv("UnmakerUpgrade3Icon")){
			hdp.aggravateddamage+=50;
	}else
			hdp.aggravateddamage+=25;
			setweaponstate("reloadend");
		}

	applycostblues:
		UMKR B 1 offset(32,49){
		let hdp=hdplayerpawn(self);
	if(!countinv("UnmakerUpgrade1Icon")){
			A_TakeInventory("HDBlues",50);
	}else
			A_TakeInventory("HDBlues",200);
			setweaponstate("reloadend");
		}
		
	unload:
	    	//abort if no keys to unload
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"lowertoopen");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"lowertoopen");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"lowertoopen");
		goto nope;

	//lower the weapon, open it, decide what to do
	lowertoopen:
		UMKR A 2 offset(0,36);
		UMKR A 2 offset(4,38){
			A_StartSound("misc/gibbed",CHAN_WEAPON);
			A_MuzzleClimb(-frandom(1.2,1.8),-frandom(1.8,2.4));
		}
		UMKR A 6 offset(9,41)A_StartSound("misc/smallslop",CHAN_AUTO);
		UMKR A 8 offset(12,43)A_StartSound("misc/bulletflesh",CHAN_WEAPON);
		UMKR A 5 offset(10,41)A_StartSound("misc/bulletflesh",CHAN_AUTO);
	slop:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"slop3");
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"slop2");
		UMKR A 10 offset(11,42){
				A_SetTics(4);
				A_DropItem("HDOrangeDemonKey");
				A_TakeInventory("UnmakerUpgrade1Icon",1);
		if(invoker.weaponstatus[UNMS_MAG]>50)
		invoker.weaponstatus[UNMS_MAG]=50; //preventing exploits
		}goto unloadend;
		
	slop2:
		UMKR A 10 offset(11,42){
				A_SetTics(4);
				A_DropItem("HDPurpleDemonKey");
				A_TakeInventory("UnmakerUpgrade2Icon",1);

				if(invoker.weaponstatus[UNMS_GUIDED]==1){
				A_ClearOverlays(15,15);
				Invoker.Laser=false;
				invoker.weaponstatus[UNMS_GUIDED]=0;
				}

		}goto unloadend;
		
	slop3:
		UMKR A 10 offset(11,42){
				A_SetTics(4);
				A_DropItem("HDCyanDemonKey");
				A_TakeInventory("UnmakerUpgrade3Icon",1);
		}goto unloadend;

	unloadend:
		UMKR A 3 offset(9,41);
		UMKR A 2 offset(6,38);
		UMKR A 3 offset(2,34);
		goto ready;

	reloadend:
		UMKR B 3 offset(30,52);
		UMKR B 2 offset(20,46);
		UMKR A 1 offset(10,42);
		UMKR A 1 offset(5,38);
		UMKR A 1 offset(0,34);
		goto nope;

//all negative effects are handled here
	picknegativeeffects:
		UMKR A 0 A_Jump(128,"Effect1","Effect2","Effect3");
		goto nope;

	Effect1:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade1Icon",1,"DoEffect1");
		goto nope;

	DoEffect1:
		UMKR A 0{
		let hdp=hdplayerpawn(self);
		hdp.fatigue+=10;
		hdp.stunned+=1;
		}
		goto nope;

	Effect2:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"DoEffect2");
		goto nope;

	DoEffect2:
		UMKR A 0 a_spawnitemex("HallucinationSpawner",0,0,0,0,0,0,0,SXF_NOPOINTERS|SXF_NOCHECKPOSITION);
		goto nope;

	Effect3:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade3Icon",1,"DoEffect3");
		goto nope;


	GuidedMode:
		UMKR A 0 A_JumpIfInventory("UnmakerUpgrade2Icon",1,"ToggleGuide");
		goto nope;
	ToggleGuide:
		UMKR A 0{
				if(invoker.weaponstatus[UNMS_GUIDED]==1){
				A_ClearOverlays(15,15);
				invoker.weaponstatus[UNMS_GUIDED]=0;
				Invoker.Laser=false;
				}else{
				A_Overlay(15,"CrosshairStuff");
				invoker.weaponstatus[UNMS_GUIDED]=1;
				Invoker.Laser=true;
				}
				A_StartSound("misc/smallslop",CHAN_AUTO);
			}
		goto nope;

	DoEffect3:
		UMKR A 0{
		damagemobj(invoker,self,random(1,10),"balefire");
		}
		goto nope;

	spawn:
		UMKR Z -1;
			stop;
		}
	override void initializewepstats(bool idfa){
		weaponstatus[0]=0;
	if(!countinv("UnmakerUpgrade1Icon"))
			weaponstatus[UNMS_MAG]=50;
			else weaponstatus[UNMS_MAG]=200;
		weaponstatus[UNMS_CHAMBER]=2;
		weaponstatus[UNMS_SUBMAG]=10;
	}
}
enum unmakerstatus{
	UNMF_JUSTUNLOAD=1,

	UNMN_SEMIONLY=1,
	UNMN_BURSTONLY=2,
	UNMN_FULLONLY=3,

	UNMS_FLAGS=0,
	UNMS_MAG=1,
	UNMS_CHAMBER=2, //0 empty, 1 spent, 2 loaded
	UNMS_TICS=3,
	UNMS_PISSING=4,
	UNMS_GUIDED=5,
	UNMS_SUBMAG=6,
};

#include "archon.zs"

class HarbingerSoul2:HDMobBase replaces HarbingerSoul{
int tick;
	default{
		+float +nogravity +lookallaround
		health 40;
		height 30;
		radius 15;
		speed 20; scale 0.5;
		mass 42; renderstyle "add";
		seesound "skeleton/attack";
		+ghost +noclip +invulnerable +nopain -solid +nointeraction
		obituary "%o was overwhelmed by a harbinger soul.";
		hdmobbase.landsound "";
	}
	states{
		spawn:
			tnt1 a 1 a_look();
			tnt1 a 1 a_look();
			tnt1 a 1 a_look();
			tnt1 a 1 a_look();
			stop;
		
		see:
			tnt1 a 0 A_FaceTarget(20,20,flags:FAF_MIDDLE);
			tnt1 a 0{
			if(tick>19)setstatelabel("stopandgo");
			}
			tnt1 a 0{tick++;}
			tnt1 a 0 a_jumpiftargetinsidemeleerange("doeffect");
			manf a 1 a_hdchase();
			tnt1 a 0{tick++;}
			tnt1 a 0 a_jumpiftargetinsidemeleerange("doeffect");
			manf b 1 a_hdchase();
			loop;

		stopandgo:
			tnt1 a 0{a_stop(); tick=0;}
			goto see;

		doeffect:
			tnt1 a 0 a_damagetarget(1);
			tnt1 aaaaa 1 A_SpawnItemEx("HDSmoke",0,0,0,random(4,0),random(-2,2),random(1,3),0,SXF_NOCHECKPOSITION);
			tnt1 a 1 a_jump(96,"Gluottony","Pride","Lust");
		shotcountpurge:
			tnt1 a 1 a_takefromtarget("UnmakerShotsFired",random(10,111));
			stop;
		gluottony:
			tnt1 a 1 a_givetotarget("UnmakerUpgrade1Icon",1);
			stop;
		pride:
			tnt1 a 1 a_givetotarget("UnmakerUpgrade2Icon",1);
			stop;
		lust:
			tnt1 a 1 a_givetotarget("UnmakerUpgrade3Icon",1);
			stop;
	}
}

class UnmakerGuide : Actor
{
	Default
	{
		+NOINTERACTION
		+CLIENTSIDEONLY
		+FORCEXYBILLBOARD
		+NOBLOCKMAP
		+DONTSPLASH
		+THRUACTORS
		+NOTRIGGER
		+PAINLESS
  +NODAMAGETHRUST
  +BLOODLESSIMPACT
		+NOBLOCKMAP
		+NOBLOCKMONST
		+NOTONAUTOMAP
		+CANNOTPUSH
		+ROLLSPRITE
		+INTERPOLATEANGLES
		+SKYEXPLODE
		+PUFFONACTORS
		Radius 0.5;
		Height 1;
		Gravity 0.66;
		RenderStyle "Add";
		Alpha 0.99;
		scale 0.05;
	}
	States
	{
	Spawn:
		UMBM T 2 Bright;
		Stop;

		//added in case if the laser's pointing at a monster
	Death:
	XDeath:
	Melee:
	Crash:
		UMBM T 2 Bright;
		Stop;
	}
}

class BeamSpotRed:HDActor{
	default{
		+nointeraction //+noblockmap
		+forcexybillboard
		translation "207:192=176:191";
		height 0.1;radius 0.1;
		renderstyle "add";
	}

	//sit around and zap nearby shit at random
	static void RedArcZap(
		actor caller,
		double rad=0,
		int maxdamage=8,
		bool indiscriminate=false
	){
		array<actor> zappables;zappables.clear();
		if(!rad)rad=frandom(32,128);
		blockthingsiterator it=blockthingsiterator.create(caller,rad);
		while(it.next()){
			actor itt=it.thing;
			if(
				itt.bshootable
				&&(
					indiscriminate
					||caller.ishostile(itt)
				)
				&&caller.distance3dsquared(itt)<=(rad*rad)
				&&caller.checksight(itt)
			)zappables.push(itt);
		}
		actor itt=caller;
		if(zappables.size())itt=zappables[random(0,zappables.size()-1)];
		RedZapArc(caller,itt,ARC2_RANDOMSOURCE,rad,rad*0.3,dev:0.8);
		if(itt)itt.damagemobj(caller,caller,random(1,maxdamage),"electrical");
	}

	override void postbeginplay(){
		super.postbeginplay();
		changetid(TB_BEAMSPOTTID);
	}
	void A_Flicker(){
		alpha=frandom(0.1,1.);
		double amt=frandom(0.6,1.3);
		scale=(randompick(1,-1),1.)*amt;
		if(!random(0,7))HDMobAI.Frighten(self,256);
	}
	void A_BeamSpotBoom(){
		if(!target){ //how would this even happen?
			spawn("HDExplosion",pos,ALLOW_REPLACE);
			A_Explode();
			return;
		}
		double tgtdist=distance3d(target)-64;

		//arc lightning back to owner
		vector2 oldface=(angle,pitch);
		A_FaceTarget(0,0,FAF_TOP);
		target.A_CustomRailgun(
			random(120,240),0,"","ff 55 88", //this line here is the one that matters - 1337spy
			RGF_SILENT|RGF_NOPIERCING|RGF_FULLBRIGHT,
			0,40.0,"HDArcPuff",0,0,
			tgtdist,12,0.4,2.0,"",-4
		);
		angle=oldface.x;pitch=oldface.y;
		//spawn little cracks along the way
		vector3 toshooter=vec3to(target).unit();
		for(int i=0;i<tgtdist;i+=64){
			spawn("ThunderCracker",pos+toshooter*i,ALLOW_REPLACE);
		}

		//crackity crack
		target.A_StartSound("weapons/plascrack",11);
		target.A_StartSound("weapons/plascrack",12);
		target.A_StartSound("weapons/plascrack",13);
		target.A_StartSound("world/tbfar",14);
		target.A_StartSound("world/explode",15,volume:0.5);

		//flash player's muzzle
		let hdp=hdplayerpawn(target);
		if(
			hdp
			&&hdp.player
		){
			let tbt=hdunmaker(target.player.readyweapon);
			if(tbt){
				hdp.recoilfov*=0.7;
				hdp.A_MuzzleClimb(
					(frandom(1.2,1.8),-frandom(4.0,5.4)),
					(frandom(0.8,1.2),-frandom(3.4,4.2)),
					(frandom(0.4,0.8),-frandom(2.4,2.4)),
					(-frandom(0.4,1.0),frandom(2.8,2.8))
				);
				hdp.player.setpsprite(PSP_FLASH,tbt.findstate("flash"));
				hdp.A_ChangeVelocity(
					cos(pitch)*-frandom(1,3),0,
					sin(pitch)*frandom(1,3),
					CVF_RELATIVE
				);
			}
		}

		//blast heat and shit		
		A_HDBlast(
			420,random(96,256),128,"slashing",
			pushradius:420,pushamount:256,
			immolateradius:128,immolateamount:-200,immolatechance:90
		);
		actor ltt=spawn("LingeringThunderRed",pos,ALLOW_REPLACE);
		ltt.target=target;

		A_SprayDecal("BusterScorch",14);
		DistantNoise.Make(self,"world/tbfar");
		DistantNoise.Make(self,"world/tbfar2",2.);
		DistantQuaker.Quake(self,
			5,50,2048,8,128,256,256
		);

		//check floor and ceiling and spawn more debris
		DistantNoise.Make(self,"world/tbfar");
		for(int i=0;i<3;i++)A_SpawnItemEx("WallChunker",
			frandom(-4,4),frandom(-4,4),-4,
			flags:SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS
		);

		//"open" a door
		//not ready for prime time yet
		doordestroyer.destroydoor(self,frandom(1,frandom(32,96)),frandom(1,frandom(16,64)));
	}
	void A_CheckNeighbourSpots(){
		array<actor>beamspots;
		actoriterator it=level.createactoriterator(TB_BEAMSPOTTID,"BeamSpotRed");
		while(master=it.Next()){
			double dist=master.distance3d(self)*0.01;
			if(master && dist<8){
				stamina+=int(21-dist);
				if(master!=self)beamspots.push(master);
				if(master.stamina>21)master.setstatelabel("glow");
				else master.setstatelabel("spawn2");
			}
		}
		if(stamina>=144){
			for(int i=0;i<beamspots.size();i++){
				if(beamspots[i])beamspots[i].destroy();
			}
			setstatelabel("explode");
		}
		else if(stamina>=21)setstatelabel("glow");
	}

	static void RedParticleZigZag(
		actor caller,
		vector3 orig,
		vector3 dest,
		int segments=12,
		bool relpos=false,  //if true, treats o/d inputs as relative to caller
		vector3 pvel=(0,0,0),
		double dev=HDCONST_ZAPARCDEFAULTDEV  //amount of deviation in each node
	){
		if(orig==dest)return;

		if(!relpos){
			dest-=caller.pos;
			orig-=caller.pos;
		}

		array<double> arcx;
		array<double> arcy;
		array<double> arcz;
		arcx.clear();
		arcy.clear();
		arcz.clear();

		vector3 frac=(dest-orig)/segments;
		dev*=max(abs(frac.x),abs(frac.y),abs(frac.z));
		int lastpoint=segments-1;
		for(int i=0;i<segments;i++){
			if(i==lastpoint){
				arcx.push(dest.x);
				arcy.push(dest.y);
				arcz.push(dest.z);
			}else{
				arcx.push(frandom(-dev,dev)+orig.x+frac.x*i);
				arcy.push(frandom(-dev,dev)+orig.y+frac.y*i);
				arcz.push(frandom(-dev,dev)+orig.z+frac.z*i);
			}
		}

		int arx=arcx.size()-1;
		for(int i=0;i<arx;i++){
			int ii=i+1;
			vector3 firstpoint=(arcx[i],arcy[i],arcz[i]);
			vector3 lastpoint=(arcx[ii],arcy[ii],arcz[ii]);
			vector3 pointfrac=lastpoint-firstpoint;
			int pointdist=int(pointfrac.length())>>1;
			pointfrac=pointfrac.unit()*2.;
			for(int j=0;j<pointdist;j++){
				caller.A_SpawnParticle(

					"ff 55 88",SPF_FULLBRIGHT,20,frandom(2,4),0, //this line here is the one that matters - 1337spy
					firstpoint.x,
					firstpoint.y,
					firstpoint.z,
					pvel.x+frandom(-0.1,0.1),pvel.y+frandom(-0.1,0.1),pvel.z+frandom(-0.1,0.1)
				);
				firstpoint+=pointfrac;
			}
		}
	}

	static void RedZapArc(
		actor a1,
		actor a2=null,
		int flags=0,
		double radius=0,
		double height=0,
		vector3 pvel=(0,0,0),
		double dev=HDCONST_ZAPARCDEFAULTDEV
	){
		vector3 a1pos,a2pos;
		if(
			!a2
			||a1==a2
		){
			if(!a2)a2=a1;
			if(radius<=0)radius=a1.radius*1.2;
			if(height<=0)height=a1.height*1.1;
			double flr=a1.pos.z>a1.floorz?a1.height*-0.1:0;
			a1pos=(radius*(frandom(-1,1),frandom(-1,1)),frandom(flr,height));
			a2pos=(radius*(frandom(-1,1),frandom(-1,1)),frandom(flr,height));
		}else{
			a1pos=(a1.pos.xy,a1.pos.z+a1.height*0.6);
			a2pos=(a2.pos.xy,a2.pos.z+a2.height*0.6);
			if(flags&ARC2_RANDOMSOURCE){
				double radius=a1.radius*0.6;
				a1pos.xy+=(frandom(-radius,radius),frandom(-radius,radius));
				a1pos.z+=a1.height*frandom(-0.3,0.2);
			}
			if(flags&ARC2_RANDOMDEST){
				double radius=a2.radius*0.6;
				a2pos.xy+=(frandom(-radius,radius),frandom(-radius,radius));
				a2pos.z+=a2.height*frandom(-0.3,0.2);
			}
		}
		RedParticleZigZag(a1,a1pos,a2pos,relpos:(a1==a2),pvel:pvel,dev:dev);
		if(!(flags&ARC2_SILENT)){
			a1.A_StartSound("misc/zap",CHAN_ARCZAP,CHANF_OVERLAP);
			a2.A_StartSound("misc/zap2",CHAN_ARCZAP,CHANF_OVERLAP);
			a2.A_StartSound("misc/zap3",CHAN_ARCZAP,CHANF_OVERLAP);
		}
	}

	states{
	spawn:
		TNT1 A 0 nodelay A_CheckNeighbourSpots();
	spawn2:
		TNT1 A 3 A_StartSound("weapons/plasidle",CHAN_WEAPON,volume:0.4);
		stop;
	glow:
		PLSE A 0 A_SpawnItemEx("BeamSpotLightRed",flags:SXF_NOCHECKPOSITION|SXF_SETTARGET);
		PLSE A 0 A_SprayDecal("PlasmaShock",14);
		PLSE A 1 A_StartSound("weapons/plasidle",CHAN_WEAPON,volume:0.8);
		PLSE AAAA 1 A_Flicker();
		stop;
	explode:
		TNT1 A 0 A_BeamSpotBoom();
		TNT1 AAAA 0 Spawn("HDExplosion",pos+(frandom(-4,4),frandom(-4,4),frandom(-4,4)),ALLOW_REPLACE);
		TNT1 AAAA 0 Spawn("HDSmoke",pos+(frandom(-4,4),frandom(-4,4),frandom(-4,4)),ALLOW_REPLACE);
		TNT1 AAAAAAAA 0 RedArcZap(self);
		TNT1 AAAAAAAAAAAAAAA 2 RedArcZap(self);
		stop;
	}
}
class BeamSpotLightRed:PointLight{
	override void postbeginplay(){
		super.postbeginplay();
		args[0]=255;
		args[1]=85;
		args[2]=136;
		args[3]=0;
		args[4]=0;
	}
	override void tick(){
		if(!target){
			args[3]+=randompick(-10,10,-5,-20);
			if(args[3]<1)destroy();
		}else{
			args[3]=randompick(14,24,44);
			setorigin(target.pos,true);
		}
	}
}
class BeamSpotFlashRed:IdleDummy{
	default{
		+puffonactors +hittracer +puffgetsowner +rollsprite +rollcenter +forcexybillboard
		renderstyle "add";
		obituary "%o was roasted by %k's particle splatter.";
		decal "Scorch";
		translation "207:192=176:191";
		seesound "weapons/plasmaf";
		deathsound "weapons/plasmaf";
	}
	double impactdistance;
	override void postbeginplay(){
		if(impactdistance>2000){
			destroy();
			return;
		}
		super.postbeginplay();

		double impactcloseness=2000-impactdistance;
		scale*=(impactcloseness)*0.0006;
		alpha=scale.y+0.3;
		vel=(frandom(-1,1),frandom(-1,1),frandom(1,3));

		int n=int(max(impactcloseness*0.03,2));
		int n1=n*3/5;
		int n2=n*2/5;
		if(tracer){
			HDF.Give(tracer,"Heat",n);
			int dmgflags=target&&target.player?DMG_PLAYERATTACK:0;
			tracer.damagemobj(self,target,random(n1,n),"electrical",dmgflags);
		}
		A_HDBlast(
			n*2,random(1,n),n,"electrical",
			n,-n,
			immolateradius:n1,immolateamount:random(4,8)*n2/-10,immolatechance:n
		);

		pitch=frandom(80,90);
		angle=frandom(0,360);
		A_SpawnItemEx("BeamSpotFlashLightRed",flags:SXF_NOCHECKPOSITION|SXF_SETTARGET);
		A_SpawnChunks("HDGunSmoke",clamp(n2*3/5,4,7),3,6);
		A_StartSound("weapons/plasmaf");
		A_AlertMonsters();
	}
	states{
	spawn:
		PLSS AB 1 bright;
		PLSE AAA 1 bright A_FadeIn(0.1);
		PLSE BCDE 1 bright A_FadeOut(0.1);
		stop;
	}
}

class BeamSpotFlashLightRed:PointLight{
	override void postbeginplay(){
		super.postbeginplay();
		args[0]=255;
		args[1]=85;
		args[2]=136;
		args[3]=96;
		args[4]=0;
	}
	override void tick(){
		if(isfrozen())return;
		args[3]+=randompick(-10,5,-20);
		if(args[3]<1)destroy();
	}
}


//Ionized is the ground because of you
class LingeringThunderRed:IdleDummy{
	int startingstamina;
	default{
		stamina 256;
	}
	override void postbeginplay(){
		super.postbeginplay();
		startingstamina=stamina;
	}
	void A_Zap(){
		if(stamina<1){destroy();return;}
		stamina-=5;
		blockthingsiterator zit=blockthingsiterator.create(self,96+(stamina>>2));
		int icount=0;
		bool haszapped=false;
		while(zit.next()){
			actor zt=zit.thing;
			if(
				!zt
				||(!zt.bshootable&&!zt.bsolid)
				||abs(zt.pos.z-pos.z)>96
				||zt.floorz+(stamina>>2)<zt.pos.z
				||random(0,3)
				||!checksight(zt)
			)continue;
			haszapped=true;
			int zappower=Zap(zt,self,target,stamina);
			stamina-=max(2,zappower>>3);
		}
		if(!haszapped){
			double oldrad=radius;
			a_setsize(stamina,height);
			Zap(self,self,target,stamina,true);
			a_setsize(oldrad,height);
		}
		A_SetTics(max(1,min(random(4,24),int(sqrt(startingstamina-stamina)))));
	}
	static int Zap(actor victim,actor inflictor,actor source,int baseamount,bool nodmg=false){
		//create arc
		double ztr=victim.radius;
		vector3 nodes[4];
		int len=min(35,baseamount);
		nodes[0]=victim.pos+(frandom(-ztr,ztr),frandom(-ztr,ztr),frandom(0,victim.height));
		nodes[1]=nodes[0]+(frandom(-len,len),frandom(-len,len),frandom(-len,len));
		nodes[2]=nodes[1]+(frandom(-len,len),frandom(-len,len),frandom(-(len>>1),len));
		nodes[3]=nodes[2]+(frandom(-len,len),frandom(-len,len),frandom(-len*2/3,(len>>1)));
		for(int i=1;i<4;i++){
			vector3 pastnode=nodes[i-1];
			vector3 particlepos=nodes[i]-pastnode;
			int iterations=int(particlepos.length());
			vector3 particlemove=particlepos/iterations;
			particlepos=pastnode-victim.pos;
			for(int i=0;i<iterations;i++){
				victim.A_SpawnParticle("ff 55 88", //this line here is the one that matters - 1337spy
					SPF_RELATIVE|SPF_FULLBRIGHT,(len>>1),frandom(1,7),0,
					particlepos.x,particlepos.y,particlepos.z,
					frandom(-0.1,0.1),frandom(-0.1,0.1),frandom(0.1,0.2),
					frandom(-0.1,0.1),frandom(-0.1,0.1),-0.05
				);
				particlepos+=particlemove+(frandom(-1,1),frandom(-1,1),frandom(-1,1));
			}
		}

		int zappower=random(baseamount>>2,baseamount);
		victim.A_StartSound("weapons/plasidle",CHAN_AUTO,volume:frandom(0.2,0.6));
		victim.A_StartSound("misc/arccrackle",CHAN_AUTO);
		victim.A_StartSound("weapons/plascrack",CHAN_AUTO,volume:frandom(0.2,0.6));
		actor bsfl=spawn("BeamSpotFlashLightRed",victim.pos,ALLOW_REPLACE);
		bsfl.target=victim;

		//make bodies spasm
		if(
			victim.bcorpse
			&&victim.bshootable
			&&victim.mass
			&&!!victim.findstate("dead")
		){
			victim.vel.z+=3.*zappower/victim.mass;
		}

		if(!nodmg)victim.damagemobj(inflictor,source,zappower,"electrical",source&&source.player?DMG_PLAYERATTACK:0);
		return zappower;
	}
	states{
	spawn:
		TNT1 A 1 A_Zap();
		wait;
	}
}

Class BlankPuffUnmaker : Actor
{
	Default
	{
		Height 0;
		VSpeed 0;
		+ALWAYSPUFF
		+NOGRAVITY
		+PUFFONACTORS
		+SKYEXPLODE
		+NOTIMEFREEZE
		+BLOODLESSIMPACT
		+NOTRIGGER
		+THRUACTORS
		+FORCEDECAL
		Decal "";
	}
	States
	{
	Spawn:
		TNT1 A 4;// NoDelay A_SpawnParticle("White",0,1,5);
		Stop;
	}
}

/*
THE DEMON KEYS

The Artifacts of Demonic origin. Each 3 keys represent one of the three Seven Deadly Sins: Gluttony, Pride, and Lust. According to reports of a classified division of UAC, trying to use them in the wrong order and/or don't have the Unmaker will result in the keys sending electric shocks strong enough to incapacitate a person almost immediately. Using them appropriately however, some people who used them heard threats coming from voices of the non-existent. They were known to power up The Unmaker and unlock its potential, but also bringing consequences with them.

THE UNMAKER

The Weapon of Hell itself. The curse of human and demonkind alike. The Bane of The Tyrant's Existence. It is forged from Demons who posed an extreme threat from their own kind. Scriptures from where it was extracted from says that it's capable of destroying whatever it is in its way, hence its name. However, it isn't an excuse to be too cocky from the weapon. A grim note said that whoever overuses the weapon will suffer the consequences of The Unmaker, which turn any soul, regardless of species into the Archon of Hell, a demon forged from Unmaker, indicating that the Unmaker's curse is complete.
*/
